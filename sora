#!/usr/bin/env php
<?php

use Bryse\Sora\Interpreter;
use Bryse\Sora\Exceptions\InterpreterException;
use Bryse\Sora\Exceptions\SyntaxException;
use Bryse\Sora\Lexer;
use Bryse\Sora\Parser\Parser;
use Bryse\Sora\Parser\Nodes\NodeVisualizer;

const TAB = "  ";

// Composer's autoload.
require __DIR__ . '/vendor/autoload.php';

\set_error_handler(function ($severity, $message, $file, $line) {
    throw new \ErrorException($message, 0, $severity, $file, $line);
}, E_ALL);

if (\php_sapi_name() !== 'cli') {
    exit(1);
}

function input()
{
    return \fgets(STDIN);
}

function output($val)
{
    \fputs(STDOUT, $val);
}

function result($val)
{
    output(type($val));
}

function type($val)
{
    $format = "%s";

    switch(gettype($val)) {
        case 'integer':
        case 'float':
        case 'double':
            $format = color("%s", 'blue');
            break;
        default:
            $format = '"%s"';
    }

    return sprintf($format, $val);
}

function color($text = '', $color = null)
{
    $styles = [
        'green'  => "\033[0;32m%s\033[0m",
        'red'    => "\033[31;31m%s\033[0m",
        'yellow' => "\033[33;33m%s\033[0m",
        'blue'   => "\033[33;34m%s\033[0m",
    ];

    return \sprintf(isset($styles[$color]) ? $styles[$color] : '%s', $text);
}

function cmd($cmd, $input)
{
    $input = \trim($input);

    return \substr($input, 0, \strlen($cmd)) === $cmd;
}

function snip($cmd, $input)
{
    return \substr($input, \strlen($cmd));
}

function asi($input)
{
    if (\trim($input) === '') {
        return $input;
    }

    return \rtrim($input, "\n;");
}

function run($input)
{
    try {
        result(Interpreter::run($input));
    } catch(InterpreterException | SyntaxException $e) {
        output(color($e->getMessage(), 'red'));
    }
}

if (!empty($input = $argv[1] ?? null)) {
    if (substr($input, 0, 2) !== '--' && substr($input, 0, 1) !== '-') {
        run($input);
    } else {
        switch($input) {
            case '-d':
            case '--dot':
                $filename = $argv[2];

                if (!file_exists($filename)) {
                    output(color('Error: File "'. $filename .'" does not exist.', 'red'). PHP_EOL);
                    exit;
                }

                $lexer = new Lexer(file_get_contents($filename));
                $parser = new Parser($lexer);
                $visualizer = new NodeVisualizer($parser);
                try {
                    echo $visualizer->generateDot() . PHP_EOL;
                } catch(InterpreterException | SyntaxException $e) {
                    output(color($e->getMessage(), 'red'). PHP_EOL);
                }
                exit;
        }
        output(color('Unknown option '. $input). PHP_EOL, 'red');
    }
    output(PHP_EOL);
    exit;
}

output('Sora Version ' . color('0.0.1', 'green') . PHP_EOL);
output('exit:    Exit the REPL' . PHP_EOL);
output(color('Options:', 'yellow'). PHP_EOL);
$options = [
    '-p, --parse[=CODE]' => 'Parses code with the interpreter.',
    '-d, --dot[=FILENAME]' => 'Generates a DOT file based on the provided code file as input.',
];

foreach($options as $option => $description) {
    output(color(str_pad(TAB . $option, 30), 'green') . $description . PHP_EOL);
}

// output('printr:  Perform a print_r()' . PHP_EOL);
// output('exec:    Execute an external program' . PHP_EOL);
// output('>>>:     Start a heredoc of PHP code' . PHP_EOL);
// output('<<<:     End a heredoc of PHP code' . PHP_EOL);
// output('!!!:     Discard a heredoc of PHP code' . PHP_EOL);
output(PHP_EOL);

$buffer = '';
$buffering = false;

while (true) {
    output(color('sora > ', $buffering ? 'blue' : 'yellow'));

    $input = input();
    if (cmd('exit', $input)) {
        exit;
    }

    if (cmd('exec', $input)) {
        \exec(snip('exec', $input), $result);
        $result = \trim(\implode("\n", $result));
        if (! empty($result)) {
            output($result . PHP_EOL);
        }
        continue;
    }

    if (cmd('dump', $input)) {
        $input = 'var_dump(' . snip('dump', $input) . ');';
    } elseif (cmd('printr', $input)) {
        $input = 'print_r(' . snip('printr', $input) . ');';
    }

    if (cmd('>>>', $input)) {
        $buffering = true;
        $input = snip('>>>', $input);
    } elseif (cmd('<<<', $input)) {
        if (! $buffering) {
            continue;
        }

        $buffering = false;
        $input = snip('<<<', $input);
    } elseif (cmd('!!!', $input)) {
        $buffering = false;
        $buffer = '';
        continue;
    }

    if ($buffering) {
        $buffer .= $input;
        continue;
    }

    if (! empty($buffer)) {
        $input = $buffer;
        $buffer = '';
    } else {
        $input = asi($input) . PHP_EOL;
    }

    $input = \rtrim($input, "\n");
    if (empty($input)) {
        continue;
    }

    run($input);

    output(PHP_EOL);
}
